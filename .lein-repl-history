(use '[clojure.test])
(run-tests)
(run-tests 'almanac.handler)
(run-tests 'almanac.test.handler)
(require '[almanac.test.handler])
(use '[clojure.test])
(run-tests 'almanac.test.handler)
(require '[almanac.test.handler])
(refresh)
(require '[almanac.test.handler])
(refresh)
(clojure.tools.namespace.repl/refresh)
(use '[clojure.test])
(run-tests 'almanac.test.handler)
(refresh)
(clojure.tools.namespace.repl/refresh)
(run-tests 'almanac.test.handler)
(clojure.tools.namespace.repl/refresh)
(run-tests 'almanac.test.handler)
(clojure.tools.namespace.repl/refresh)
(run-tests 'almanac.test.handler)
(clojure.tools.namespace.repl/refresh)
(run-tests 'almanac.test.handler)
(clojure.tools.namespace.repl/refresh)
(run-tests 'almanac.test.handler)
(clojure.tools.namespace.repl/refresh)
(run-tests 'almanac.test.handler)
(clojure.tools.namespace.repl/refresh)
(refresh)
(run-tests 'almanac.test.handler)
(clojure.tools.namespace.repl/refresh)
(run-tests 'almanac.test.handler)
(require 'clojure.test)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(def fc-map-test-data (slurp (io/resource "fc-map.txt")))
(require '[clojure.java.io :as io])
(def fc-map-test-data (slurp (io/resource "fc-map.txt")))
(require '[cheshire.core :as json])
(json/parse-string fc-map-test-data)
(json/parse-string fc-map-test-data true)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(almanac.fullcontact/find-person "valerii.hiora@gmail.com")
(require '[environ.core :refer [env]])
(:fullcontact-apikey env)
env
(keys env)
(require '[environ.core :refer [env]])
(keys env)
(:fullcontact-apikey env)
(refresh)
(almanac.fullcontact/find-person "valerii.hiora@gmail.com")
(refresh)
(almanac.fullcontact/find-person "valerii.hiora@gmail.com")
(refresh)
(almanac.fullcontact/find-person "valerii.hiora@gmail.com")
(:fullcontact-apikey33 env 44)
(require '[environ.core :refer [env]])
(:fullcontact-apikey33 env 44)
 -h
(refresh)
(require '[almanac.storage :as s])
(macroexpand-1 )
(macroexpand-1 '(get-or-create person {:email email} {:email email}))
(macroexpand-1 '(s/get-or-create person {:email email} {:email email}))
(pprint (macroexpand-1 '(s/get-or-create person {:email email} {:email email})))
(:id {})
(:id nil)
(apply str :service :url)
(apply str [:service :url])
(require '[almanac.storage])
(refresh)
(require '[lobos.migration])
(lobos.migration/up)
(lobos.migration/pending-migrations)
(lobos.migration/list-migrations)
(lobos.migration/do-migrations)
(require '[lobos.core])
(lobos.core/migrate)
(require '[environ.core :refer [env]])
(:rds-db env)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(almanac.storage/get-entity-id almanac.storage/person {:email "test@test.com"))
(almanac.storage/get-entity-id almanac.storage/person {:email "test@test.com"})
(lobos.core/migrate)
(almanac.storage/get-entity-id almanac.storage/person {:email "test@test.com"})
(almanac.storage/get-info "test@test.com")
(:rds-db environ.core/env)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(zolo.utils.clojure/diff [{:a 1 :b 2] [:a 1 :b 2] #(apply str (:a %) (:b %))
(zolo.utils.clojure/diff [{:a 1 :b 2}] [{:a 1 :b 2}] #(apply str (:a %) (:b %))
)
(zolo.utils.clojure/diff [{:a 1 :b 2}] [{:a 1 :b 2}] #(apply str (:a %) (:b %)))
(str 4)
(zolo.utils.clojure/diff [{:a 1 :b 2}] [{:a 1 :b 2}] #(str (:a %) (:b %)))
(zolo.utils.clojure/diff [{:a 1 :b 2}] [{:a 2 :b 2}] #(str (:a %) (:b %)))
(zolo.utils.clojure/diff [{:a 1 :b 2}] [{:a 2 :b 2} {:a 2 :b 1}] #(str (:a %) (:b %)))
(zolo.utils.clojure/diff [{:a 1 :b 2}] [{:a 2 :b 2} {:a 1 :b 1}] #(str (:a %) (:b %)))
(zolo.utils.clojure/diff [{:a 1 :b 2}] [{:a 2 :b 2} {:a 1 :b 1}] #(str (:a %)))
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
 (mapcat (fn [service-name#]
                                (map #(assoc % :service service-name#)
                                     (get ~new-data service-name#)))
(keys new-data))
(mapcat (fn [service-name] (map #(assoc % :service service-name) (get new-data service-name))) (keys new-data))
(def new-data almanac.test.storage/update-info)
(mapcat (fn [service-name] (map #(assoc % :service service-name) (get new-data service-name))) (keys new-data))
new-data
(def new-data (:photos almanac.test.storage/update-info))
(mapcat (fn [service-name] (map #(assoc % :service service-name) (get new-data service-name))) (keys new-data))
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(almanac.utils/map-by-key :service [{:service "twitter" :url "a"} {:service "google" :url "b"}])
(almanac.utils/map-by-key :service [{:service "twitter" :url "a"} {:service "google" :url "b"} {:service "twitter" :url "c"])
(almanac.utils/map-by-key :service [{:service "twitter" :url "a"} {:service "google" :url "b"} {:service "twitter" :url "c"}])
(almanac.utils/group-by-and-compacted :service #(select-keys % [:url]) [{:service "twitter" :url "a"} {:service "google" :url "b"} {:service "twitter" :url "c"}])
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(lobos/core migrate)
(refresh)
(lobos/core migrate)
(refresh)
(lobos/core migrate)
(lobos.core/migrate)
(almanac.storage/store-info "test@test.com" almanac.test.storage/test-info)
(korma.core/select almanac.storage/person)
(korma.core/select almanac.storage/photo)
(refresh)
(korma.core/delete almanac.storage/photo)
(korma.core/delete almanac.storage/profile)
(korma.core/delete almanac.storage/person)
(korma.core/select almanac.storage/photo)
(korma.core/select almanac.storage/person)
(almanac.storage/store-info "test@test.com" almanac.test.storage/test-info)
(korma.core/select almanac.storage/person)
(korma.core/select almanac.storage/photo)
(korma.core/select almanac.storage/profile)
(almanac.storage/get-or-create almanac.storage/person {:email "t2"} {:email "t2"})
(korma.core/insert almanac.storage/person (values {:email "t3"}))
(korma.core/insert almanac.storage/person (korma.core/values {:email "t3"}))
(korma.core/insert almanac.storage/person (korma.core/values {:email "t4"}))
(refresh)
(korma.core/delete almanac.storage/person)
(korma.core/delete almanac.storage/photo)
(korma.core/delete almanac.storage/profile)
(almanac.storage/store-info "test@test.com" almanac.test.storage/test-info)
(korma.core/select almanac.storage/photo)
(korma.core/select almanac.storage/profile)
(clojure.test/run-tests 'almanac.test.storage)
(:rds-db environ.core/env)
(clojure.test/run-tests 'almanac.test.core)
(require '[almanac.test.core])
(clojure.test/run-tests 'almanac.test.core)
(require '[almanac.test.core :reload])
(require '[almanac.test.core :reload true])
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(:rds-host environ.core/env)
(:rds-user environ.core/env)
(:rds-db environ.core/env)
(:rds-pass environ.core/env)
(:rds-db environ.core/env)
(clojure.test/run-tests almanac.test.core)
(require 'almanac.test.core)
(clojure.test/run-tests almanac.test.core)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(:rds-db environ.core/env)
(:rds-pass environ.core/env)
(refresh)
(almanac.core/get-social-info "valerii.hiora@gmail.com")
(lobos.core/migrate)
(almanac.core/get-social-info "valerii.hiora@gmail.com")
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update false)
(not false)
(not nil)
(almanac.fullcontact/find-person "valerii.hiora@gmail.com")
(almanac.core/fullcontact->almanac (almanac.fullcontact/find-person "valerii.hiora@gmail.com"))
(refresh)
(almanac.core/fullcontact->almanac (almanac.fullcontact/find-person "valerii.hiora@gmail.com"))
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update false)
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update true)
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update false)
(refresh)
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update false)
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update true)
(refresh)
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update true)
(refresh)
(almanac.core/get-social-info "valerii.hiora@gmail.com" :force-update true)
(almanac.core/get-social-info "hhhhhhaoua@aoeuaoeu.hoeuaoeu" :force-update true)
(clojure.test/run-tests 'almanac.test.storage)
(lobos.core/migrate)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(defmacro filtered-entities [entity entity-fields filter]
  `(vec
    (select ~entity
            (fields ~@entity-fields)
            (where ~filter))))
(macroexpand-1 '(filtered-entities entity ent-fieds {:a b}))
(macroexpand-1 '(filtered-entities "a" ["a" "b"] {:a b}))
(macroexpand-1 '(filtered-entities 'aoeu ["a" "b"] {:a b}))
(macroexpand-1 '(filtered-entities entity ["a" "b"] {:a b}))
(refresh)
(macroexpand-1 '(almanac.storage/filtered-entities entity ["a" "b"] {:a b}))
(def a [:a :b])
(macroexpand-1 '(almanac.storage/filtered-entities entity a {:a b}))
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(refresh)
(clojure.test/run-tests 'almanac.test.storage)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(refresh)
(clojure.test/run-tests 'almanac.test.core)
(clojure.test/run-tests 'almanac.test.handler)
(refresh)
(clojure.test/run-tests 'almanac.test.handler)
(dev-system)
(start)
(require '[almanac.social-adapter.twitter :as tw])
(refresh)
(start)
(def twad (almanac.social-adapter.twitter/adapter "pIC69WHfuX9ybynDL0aQg" "GM5d1WD0sAgmaXi9xKHfWxUNaC9J34rDyRskxZjY"))
(almanac.social-adapter/update-user-activity twad "vhbit")
(almanac.social-adapter/update-user-activity twad "vhbit" sys)
(keys sys)
(keys (:activity-storage sys))
(almanac.storage/get-user-items (:activity-storage sys) "vhbit" :twitter)
(refresh)
(start)
(almanac.social-adapter/update-user-activity twad "vhbit" sys)
(def twad (almanac.social-adapter.twitter/adapter "pIC69WHfuX9ybynDL0aQg" "GM5d1WD0sAgmaXi9xKHfWxUNaC9J34rDyRskxZjY"))
(almanac.social-adapter/update-user-activity twad "vhbit" sys)
(almanac.storage/get-user-items (:activity-storage sys) "vhbit" :twitter)
(almanac.storage/geposts (:activity-storage sys) "vhbit" :twitter)
(almanac.storage/get-user-posts (:activity-storage sys) "vhbit" :twitter)
(almanac.social-adapter/update-user-activity twad "vhbit" sys)
(almanac.storage/get-user-posts (:activity-storage sys) "vhbit" :twitter)
(refresh)
(def twad (almanac.social-adapter.twitter/adapter "pIC69WHfuX9ybynDL0aQg" "GM5d1WD0sAgmaXi9xKHfWxUNaC9J34rDyRskxZjY"))
(start)
(almanac.social-adapter/update-user-activity twad "vhbit" sys)
(almanac.storage/get-user-posts (:activity-storage sys) "vhbit" :twitter)
(refresh)
(start)
(almanac.social-adapter/update-user-activity twad "vhbit" sys)
(def twad (almanac.social-adapter.twitter/adapter "pIC69WHfuX9ybynDL0aQg" "GM5d1WD0sAgmaXi9xKHfWxUNaC9J34rDyRskxZjY"))
(almanac.social-adapter/update-user-activity twad "vhbit" sys)
(almanac.storage/get-user-posts (:activity-storage sys) "vhbit" :twitter)
(:activity-storage sys)
(.source (:activity-storage sys))
(almanac.storage/get-user-posts (:activity-storage sys) "7189712" :twitter)
(require '[rotary.client :as rotary])
(def aws-creds {:secure-key "KF7rtxgl4GmTGh/4VusMZ5r4H8fT9CnefFQN/IB4" :access-key "AKIAJEB6I6TYZISUFQAQ"})
(rotary/list-tables aws-creds)
(def aws-creds {:secret-key "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" :access-key "AKIAJEB6I6TYZISUFQAQ"})
(rotary/list-tables aws-creds)
(rotary/put-item aws-creds "test-posts" {:user-id "test2@everywhere" :id "34"})
(rotary/get-item aws-creds "test-posts" "test@somewhere")
(rotary/query aws-creds "test-posts" "test@somewhere")
(rotary/query aws-creds "test-posts" {:user-id "test@somewhere"})
(rotary/get-item aws-creds "test-posts" {:user-id "test@somewhere"})
(rotary/get-item aws-creds "test-posts" {"user-id" "test@somewhere"})
(rotary/get-item aws-creds "test-posts" {:user-id "test@somewhere"})
(rotary/get-item aws-creds "test-posts" {user-id "test@somewhere"})
(rotary/get-item aws-creds "test-posts" {"user-id" "test@somewhere"})
(rotary/get-item aws-creds "test-posts" {"user-id" "test@somewhere" "id" "000"})
(rotary/get-item aws-creds "test-posts" {"user-id" "test@somewhere" "id" "34"} )
(rotary/get-item aws-creds "test-posts" {"user-id" "test@somewhere"} )
(rotary/query aws-creds "test-posts" {"user-id" "test@somewhere"} )
(rotary/query aws-creds "test-posts" {:user-id "test@somewhere"} )
(rotary/query aws-creds "test-posts" {"user-id" "test@somewhere"} )
(require '[almanac.cache.dynamodb :as dc])
(def c (dc/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK"))
(def c (dc/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache"))
(almanac.service/start c)
(refresh)
(def c (dc/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache"))
(def c (almanac.cache.dynamodb/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache"))
(almanac.service/start c)
(refresh)
(def c (almanac.cache.dynamodb/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache"))
(almanac.service/start c)
(almanac.cache/set-value c "me@there" {:a 2 :b 4})
(refresh)
(def c (almanac.cache.dynamodb/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache"))
(def c (almanac.cache.dynamodb/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache2"))
(almanac.service/start c)
(almanac.cache/set-value c "me@there" {:a 2 :b 4})
(almanac.cache/get-value c "me@there")
(almanac.cache/set-value c "me@there" {:a 2 :b 5})
(almanac.cache/set-value c "me@there" {:a 2 :b 6})
(def aws-creds {:access-key "AKIAIZ6REWFXWVONAIPA" :secret-key "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"})
(rotary.client/get-item aws-creds "test-cache2" "me@there")
(rotary.client/get-item aws-creds "test-cache2" {:id "me@there"})
(refresh)
(def c (almanac.cache.dynamodb/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache2"))
(almanac.cache/get-value c "me@there")
(refresh)
(def c (almanac.cache.dynamodb/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache2"))
(almanac.cache/get-value c "me@there")
(rotary.client/get-item aws-creds "test-cache2" {:id "me@there"})
(def t {:a 3 "b" 4})
(defn ttt [{:keys [a b]}] (println "A" a) (println "B" b))
(ttt t)
(defn ttt [{"b" b}] (println "A" a) (println "B" b))
(defn ttt [{b "b"}] (println "A" a) (println "B" b))
(defn ttt [{b "b" a :a}] (println "A" a) (println "B" b))
(ttt t)
(defn ttt [{:keys ["a" "b"]}] (println "A" a) (println "B" b))
(defn ttt [{:strs [a b]}] (println "A" a) (println "B" b))
(ttt t)
(refresh)
(def c (almanac.cache.dynamodb/cache "AKIAIZ6REWFXWVONAIPA" "gV16QBGYz1cxu7cGFDSwC8DoP1DhBFJDZA3U5taK" "test-cache2"))
(almanac.cache/get-value c "me@there")
(almanac.cache/set-value c "me@there" {:a 2 :b 8})
(almanac.cache/get-value c "me@there")
(time (almanac.cache/get-value c "me@there"))
(refresh)
(pprint environ/env)
(pprint environ.core/env)
(:aws-access-key environ.core/env)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(clojure.test/run-tests 'alamanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'alamanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'alamanac.test.dynamo-cache)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(require '[almanac.test.dynamo-cache])
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(Thread/sleep 1.0)
(Thread/sleep 1)
(Thread/sleep 1000)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(require '[rotary.client :as dynamo])
(def aws-creds {:access-key "AKIAIZ6REWFXWVONAIPA" :secret-key "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"})
(dynamo/list-tables aws-creds)
(dynamo/describe-table aws-creds "ttt")
(refresh)
(almanac.cache.dynamodb/active-table? aws-creds "ttt")
(almanac.cache.dynamodb/active-table? aws-creds "ttt2")
(almanac.cache.dynamodb/active-table? aws-creds "ttt")
(almanac.cache.dynamodb/active-table? aws-creds "test-cache")
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(refresh)
(clojure.test/run-tests 'almanac.test.dynamo-cache)
(defrecord test [a b c d])
(defrecord testrec [a b c d])
(:keys testrec)
(.getRecordFieldNames testrec)
(.getDeclaredFields testrec)
(map #(.getName %) (.getDeclaredFields testrec))
(defrecord testrec [^:{:service true} a b c d])
(defrecord testrec [^{:service true} a b c d])
(defrecord testrec [^{:service true} a  ^{:subservice true}b c d])
(.getInstanceField testrec "a")
(map #(.getName %) (.getDeclaredFields testrec))
(map #(identity %) (.getDeclaredFields testrec))
(map #(identity %) (filter static? (.getDeclaredFields testrec)))
(defn static? [field]
  (java.lang.reflect.Modifier/isStatic
   (.getModifiers field)))
(map #(identity %) (filter static? (.getDeclaredFields testrec)))
(map #(identity %) (remove static? (.getDeclaredFields testrec)))
(def ta (first (map #(identity %) (remove static? (.getDeclaredFields testrec))))
)
ta
(.getMeta ta)
(def x (->testrec nil nil nil)
)
(def x (->testrec nil nil nil nil))
(meta x)
(meta (:a x))
(:a x)
(meta testrec)
(:__meta testrec)
